# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2018-10-01 13:06
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Buildings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('building_name', models.CharField(blank=True, max_length=512, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('address', models.CharField(blank=True, max_length=100, null=True)),
                ('holiday', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=1024, null=True)),
                ('business_hour', models.CharField(blank=True, max_length=100, null=True)),
                ('updated_time', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'buildings',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TCUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(max_length=11)),
                ('full_name', models.CharField(max_length=30)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'TC Users',
                'db_table': 'tc_user',
                'verbose_name': 'TC User',
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BulkAddWsFormat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('format', models.CharField(default='', max_length=30)),
                ('required', models.BooleanField()),
            ],
            options={
                'verbose_name_plural': 'Bulk Ws Formats',
                'db_table': 'bulk_ws_formats',
                'verbose_name': 'Bulk Ws Format',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('order_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(blank=True, max_length=100, null=True)),
                ('ws_name', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, max_length=10, null=True)),
                ('ws_phone', models.CharField(max_length=12)),
                ('ws_store_phone', models.CharField(max_length=12, null=True)),
                ('product_name', models.CharField(max_length=50)),
                ('sizencolor', models.CharField(db_column='sizeNcolor', max_length=1024)),
                ('price', models.IntegerField(blank=True, null=True)),
                ('count', models.IntegerField(blank=True, null=True)),
                ('floor', models.CharField(blank=True, default='', max_length=30)),
                ('location', models.CharField(blank=True, default='', max_length=30)),
                ('memo', models.CharField(blank=True, default='', max_length=100)),
                ('updated_time', models.DateTimeField()),
                ('created_time', models.DateTimeField()),
                ('created_date', models.DateField(default=None, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('notify_id', models.CharField(default='', max_length=100)),
                ('building', models.CharField(default='', max_length=100)),
                ('retailer_name', models.CharField(default='', max_length=30)),
                ('read', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'orders',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OrderFormats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fmt_name', models.CharField(default='', max_length=10, verbose_name='포맷명')),
                ('fmt_ws_name', models.CharField(max_length=10, verbose_name='도매명 포맷')),
                ('fmt_product_name', models.CharField(max_length=10, verbose_name='장끼명 포맷')),
                ('fmt_sizeNcolor', models.CharField(max_length=10, verbose_name='사이즈 및 컬러 포맷')),
                ('fmt_color', models.CharField(blank=True, max_length=10, verbose_name='컬러 포맷')),
                ('fmt_count', models.CharField(max_length=10, verbose_name='수량 포맷')),
                ('fmt_price', models.CharField(max_length=10, verbose_name='도매가 포맷')),
                ('fmt_request', models.CharField(blank=True, max_length=10, null=True, verbose_name='요청사항 포맷')),
                ('fmt_datetime', models.CharField(blank=True, max_length=20, null=True, verbose_name='날짜')),
            ],
            options={
                'verbose_name_plural': 'Order Formats',
                'db_table': 'order_formats',
                'verbose_name': 'Order Format',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TCGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=10, null=True)),
                ('org_name', models.CharField(max_length=191, null=True)),
                ('account_number', models.CharField(max_length=191, null=True)),
                ('bank', models.CharField(max_length=191, null=True)),
                ('bank_account_number', models.CharField(max_length=191, null=True)),
                ('bank_holder_name', models.CharField(max_length=191, null=True)),
            ],
            options={
                'verbose_name_plural': 'TC Groups',
                'db_table': 'tc_group',
                'verbose_name': 'TC Group',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='WsByTCGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ws_name', models.CharField(max_length=30)),
                ('building', models.CharField(max_length=30)),
                ('location', models.CharField(max_length=30)),
                ('floor', models.CharField(max_length=30)),
                ('col', models.CharField(default='', max_length=5, null=True)),
                ('ws_phone', models.CharField(max_length=30)),
                ('updated_time', models.DateTimeField(auto_now_add=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('ws_phone_second', models.CharField(default='', max_length=30)),
            ],
            options={
                'verbose_name_plural': "TCGroup's Wholesalers",
                'db_table': 'wsbytcgroup',
                'verbose_name': "TCGroup's Wholesaler",
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TCPickteam',
            fields=[
                ('tcgroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.TCGroup')),
            ],
            options={
                'verbose_name_plural': 'TC Pickteams',
                'db_table': 'tc_pickteam',
                'verbose_name': 'TC Pickteam',
                'managed': True,
            },
            bases=('app.tcgroup',),
        ),
        migrations.CreateModel(
            name='TCRetailer',
            fields=[
                ('tcgroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.TCGroup')),
                ('city', models.CharField(default='서울', max_length=10)),
                ('biz_num', models.CharField(blank=True, max_length=10, null=True)),
                ('biz_type', models.CharField(blank=True, max_length=30, null=True)),
                ('store_type', models.CharField(blank=True, max_length=30, null=True)),
                ('address', models.CharField(blank=True, max_length=191, null=True)),
                ('parser', models.CharField(default='BaseParser', max_length=30)),
                ('order_format', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.OrderFormats')),
                ('pickteam', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tc_retailer_pickteam', to='app.TCPickteam')),
            ],
            options={
                'verbose_name_plural': 'TC Retailers',
                'db_table': 'tc_retailer',
                'verbose_name': 'TC Retailer',
                'managed': True,
            },
            bases=('app.tcgroup',),
        ),
        migrations.AddField(
            model_name='wsbytcgroup',
            name='group',
            field=models.ForeignKey(default=3, on_delete=django.db.models.deletion.CASCADE, to='app.TCGroup'),
        ),
        migrations.AddField(
            model_name='tcgroup',
            name='group',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='auth.Group'),
        ),
        migrations.AddField(
            model_name='tcgroup',
            name='main_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='order',
            name='pickteam',
            field=models.ForeignKey(db_column='pickteam_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='app.TCPickteam'),
        ),
        migrations.AddField(
            model_name='order',
            name='retailer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.TCRetailer'),
        ),
    ]
